import { Injectable } from '@angular/core';
import { AsyncSubject } from 'rxjs';
import { deepUpdate, defaultTemplate, drawQrcode } from './ngx-qrcode-styling.helper';
import * as i0 from "@angular/core";
class NgxQrcodeStylingService {
    /**
     * create
     * @param config
     * @param container
     * @returns
     */
    create(config, container) {
        return drawQrcode(defaultTemplate(config), container);
    }
    /**
     * update
     * @param config
     * @param configUpdate
     * @param container
     * @returns
     */
    update(config, configUpdate, container) {
        const subject = new AsyncSubject();
        (async function () {
            const conf = await deepUpdate(defaultTemplate(config), defaultTemplate(configUpdate));
            drawQrcode(conf, container).subscribe(s => {
                subject.next(s);
                subject.complete();
            });
        })();
        return subject;
    }
    /**
     * download image
     * @param fileName eg: demo.png
     * @param container
     * @param timeout
     * @returns
     */
    download(fileName, container, timeout = 100) {
        const subject = new AsyncSubject();
        setTimeout(() => {
            const canvas = container?.querySelector('canvas');
            if (canvas) {
                const typeImg = fileName ? fileName.split('.').slice(-1).toString() : 'png';
                const dataURL = canvas.toDataURL('image/' + typeImg);
                const link = document.createElement('a');
                link.download = fileName;
                link.href = dataURL;
                link.click();
                link.remove();
                subject.next({ fileName, container });
            }
            else {
                subject.error('Container not found!');
            }
            subject.complete();
        }, timeout);
        return subject;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: NgxQrcodeStylingService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: NgxQrcodeStylingService, providedIn: 'root' }); }
}
export { NgxQrcodeStylingService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.4", ngImport: i0, type: NgxQrcodeStylingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXFyY29kZS1zdHlsaW5nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcXJjb2RlLXN0eWxpbmcvc3JjL2xpYi9uZ3gtcXJjb2RlLXN0eWxpbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7O0FBR3RGLE1BR2EsdUJBQXVCO0lBRWxDOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLE1BQWUsRUFBRSxTQUFnRjtRQUM3RyxPQUFPLFVBQVUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLE1BQU0sQ0FBQyxNQUFlLEVBQUUsWUFBcUIsRUFBRSxTQUFnRjtRQUNwSSxNQUFNLE9BQU8sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ25DLENBQUMsS0FBSztZQUNKLE1BQU0sSUFBSSxHQUFHLE1BQU0sVUFBVSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsRUFBRSxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUN0RixVQUFVLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDeEMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNMLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxRQUFRLENBQUMsUUFBZ0IsRUFBRSxTQUFnRixFQUFFLE9BQU8sR0FBRyxHQUFHO1FBQy9ILE1BQU0sT0FBTyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbkMsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLE1BQU0sTUFBTSxHQUFHLFNBQVMsRUFBRSxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDakQsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7Z0JBQzVFLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxDQUFDO2dCQUNyRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztnQkFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDYixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO2FBQ3ZDO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQzthQUN2QztZQUNELE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNyQixDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDWixPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOzhHQXpEVSx1QkFBdUI7a0hBQXZCLHVCQUF1QixjQUZ0QixNQUFNOztTQUVQLHVCQUF1QjsyRkFBdkIsdUJBQXVCO2tCQUhuQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQXN5bmNTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBkZWVwVXBkYXRlLCBkZWZhdWx0VGVtcGxhdGUsIGRyYXdRcmNvZGUgfSBmcm9tICcuL25neC1xcmNvZGUtc3R5bGluZy5oZWxwZXInO1xyXG5pbXBvcnQgeyBPcHRpb25zIH0gZnJvbSAnLi9uZ3gtcXJjb2RlLXN0eWxpbmcub3B0aW9ucyc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hRcmNvZGVTdHlsaW5nU2VydmljZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIGNyZWF0ZVxyXG4gICAqIEBwYXJhbSBjb25maWcgXHJcbiAgICogQHBhcmFtIGNvbnRhaW5lciBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBwdWJsaWMgY3JlYXRlKGNvbmZpZzogT3B0aW9ucywgY29udGFpbmVyOiBIVE1MRWxlbWVudCB8IEhUTUxWaWRlb0VsZW1lbnQgfCBIVE1MQ2FudmFzRWxlbWVudCB8IFNWR0VsZW1lbnQgfCBhbnkpOiBBc3luY1N1YmplY3Q8YW55PiB7XHJcbiAgICByZXR1cm4gZHJhd1FyY29kZShkZWZhdWx0VGVtcGxhdGUoY29uZmlnKSwgY29udGFpbmVyKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHVwZGF0ZVxyXG4gICAqIEBwYXJhbSBjb25maWcgXHJcbiAgICogQHBhcmFtIGNvbmZpZ1VwZGF0ZSBcclxuICAgKiBAcGFyYW0gY29udGFpbmVyIFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGUoY29uZmlnOiBPcHRpb25zLCBjb25maWdVcGRhdGU6IE9wdGlvbnMsIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBIVE1MVmlkZW9FbGVtZW50IHwgSFRNTENhbnZhc0VsZW1lbnQgfCBTVkdFbGVtZW50IHwgYW55KTogQXN5bmNTdWJqZWN0PGFueT4ge1xyXG4gICAgY29uc3Qgc3ViamVjdCA9IG5ldyBBc3luY1N1YmplY3QoKTtcclxuICAgIChhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnN0IGNvbmYgPSBhd2FpdCBkZWVwVXBkYXRlKGRlZmF1bHRUZW1wbGF0ZShjb25maWcpLCBkZWZhdWx0VGVtcGxhdGUoY29uZmlnVXBkYXRlKSk7XHJcbiAgICAgIGRyYXdRcmNvZGUoY29uZiwgY29udGFpbmVyKS5zdWJzY3JpYmUocyA9PiB7XHJcbiAgICAgICAgc3ViamVjdC5uZXh0KHMpO1xyXG4gICAgICAgIHN1YmplY3QuY29tcGxldGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KSgpO1xyXG4gICAgcmV0dXJuIHN1YmplY3Q7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBkb3dubG9hZCBpbWFnZVxyXG4gICAqIEBwYXJhbSBmaWxlTmFtZSBlZzogZGVtby5wbmdcclxuICAgKiBAcGFyYW0gY29udGFpbmVyIFxyXG4gICAqIEBwYXJhbSB0aW1lb3V0IFxyXG4gICAqIEByZXR1cm5zIFxyXG4gICAqL1xyXG4gIHB1YmxpYyBkb3dubG9hZChmaWxlTmFtZTogc3RyaW5nLCBjb250YWluZXI6IEhUTUxFbGVtZW50IHwgSFRNTFZpZGVvRWxlbWVudCB8IEhUTUxDYW52YXNFbGVtZW50IHwgU1ZHRWxlbWVudCB8IGFueSwgdGltZW91dCA9IDEwMCk6IEFzeW5jU3ViamVjdDxhbnk+IHtcclxuICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgQXN5bmNTdWJqZWN0KCk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgY29uc3QgY2FudmFzID0gY29udGFpbmVyPy5xdWVyeVNlbGVjdG9yKCdjYW52YXMnKVxyXG4gICAgICBpZiAoY2FudmFzKSB7XHJcbiAgICAgICAgY29uc3QgdHlwZUltZyA9IGZpbGVOYW1lID8gZmlsZU5hbWUuc3BsaXQoJy4nKS5zbGljZSgtMSkudG9TdHJpbmcoKSA6ICdwbmcnO1xyXG4gICAgICAgIGNvbnN0IGRhdGFVUkwgPSBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS8nICsgdHlwZUltZyk7XHJcbiAgICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICBsaW5rLmRvd25sb2FkID0gZmlsZU5hbWU7XHJcbiAgICAgICAgbGluay5ocmVmID0gZGF0YVVSTDtcclxuICAgICAgICBsaW5rLmNsaWNrKCk7XHJcbiAgICAgICAgbGluay5yZW1vdmUoKTtcclxuICAgICAgICBzdWJqZWN0Lm5leHQoeyBmaWxlTmFtZSwgY29udGFpbmVyIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN1YmplY3QuZXJyb3IoJ0NvbnRhaW5lciBub3QgZm91bmQhJyk7XHJcbiAgICAgIH1cclxuICAgICAgc3ViamVjdC5jb21wbGV0ZSgpO1xyXG4gICAgfSwgdGltZW91dCk7XHJcbiAgICByZXR1cm4gc3ViamVjdDtcclxuICB9XHJcbn1cclxuIl19