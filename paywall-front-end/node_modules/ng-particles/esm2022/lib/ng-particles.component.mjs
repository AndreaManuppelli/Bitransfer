import { Component, EventEmitter, Inject, Input, Output, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { EMPTY, from, mergeMap, Subject, takeUntil } from 'rxjs';
import { tsParticles } from 'tsparticles-engine';
import * as i0 from "@angular/core";
class NgParticlesComponent {
    platformId;
    options;
    url;
    id;
    particlesInit;
    particlesLoaded = new EventEmitter();
    destroy$ = new Subject();
    container;
    constructor(platformId) {
        this.platformId = platformId;
        this.id = 'tsparticles';
    }
    ngAfterViewInit() {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        const cb = (container) => {
            this.container = container;
            this.particlesLoaded.emit(container);
        };
        from(this.particlesInit ? this.particlesInit(tsParticles) : Promise.resolve())
            .pipe(mergeMap(() => {
            if (this.url) {
                return tsParticles.loadJSON(this.id, this.url);
            }
            else if (this.options) {
                return tsParticles.load(this.id, this.options);
            }
            else {
                console.error('You must specify options or url to load tsParticles');
                return EMPTY;
            }
        }), takeUntil(this.destroy$))
            .subscribe(cb);
    }
    ngOnDestroy() {
        this.container?.destroy();
        this.destroy$.next();
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: NgParticlesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: NgParticlesComponent, selector: "ng-particles", inputs: { options: "options", url: "url", id: "id", particlesInit: "particlesInit" }, outputs: { particlesLoaded: "particlesLoaded" }, ngImport: i0, template: '<div [id]="id"></div>', isInline: true });
}
export { NgParticlesComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: NgParticlesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ng-particles',
                    template: '<div [id]="id"></div>',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { options: [{
                type: Input
            }], url: [{
                type: Input
            }], id: [{
                type: Input
            }], particlesInit: [{
                type: Input
            }], particlesLoaded: [{
                type: Output
            }] } });
class ParticlesComponent extends NgParticlesComponent {
    platformId;
    constructor(platformId) {
        super(platformId);
        this.platformId = platformId;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ParticlesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: ParticlesComponent, selector: "Particles", usesInheritance: true, ngImport: i0, template: '<div [id]="id"></div>', isInline: true });
}
export { ParticlesComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: ParticlesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'Particles',
                    template: '<div [id]="id"></div>',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcGFydGljbGVzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLXBhcnRpY2xlcy9zcmMvbGliL25nLXBhcnRpY2xlcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0SCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNqRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBSWpELE1BSWEsb0JBQW9CO0lBVWM7SUFUbEMsT0FBTyxDQUFtQjtJQUMxQixHQUFHLENBQVU7SUFDYixFQUFFLENBQVM7SUFDWCxhQUFhLENBQXFDO0lBQ2pELGVBQWUsR0FBNEIsSUFBSSxZQUFZLEVBQWEsQ0FBQztJQUUzRSxRQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQUMvQixTQUFTLENBQWE7SUFFOUIsWUFBMkMsVUFBa0I7UUFBbEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUN6RCxJQUFJLENBQUMsRUFBRSxHQUFHLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBRU0sZUFBZTtRQUNsQixJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNuQyxPQUFPO1NBQ1Y7UUFFRCxNQUFNLEVBQUUsR0FBRyxDQUFDLFNBQXFCLEVBQUUsRUFBRTtZQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztZQUMzQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUM7UUFFRixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ3pFLElBQUksQ0FDRCxRQUFRLENBQUMsR0FBRyxFQUFFO1lBQ1YsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUNWLE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNsRDtpQkFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ3JCLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNsRDtpQkFBTTtnQkFDSCxPQUFPLENBQUMsS0FBSyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7Z0JBQ3JFLE9BQU8sS0FBSyxDQUFDO2FBQ2hCO1FBQ0wsQ0FBQyxDQUFDLEVBQ0YsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDM0I7YUFDQSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekIsQ0FBQzt1R0E1Q1Esb0JBQW9CLGtCQVVULFdBQVc7MkZBVnRCLG9CQUFvQiwyTEFGbkIsdUJBQXVCOztTQUV4QixvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkFKaEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsUUFBUSxFQUFFLHVCQUF1QjtpQkFDcEM7OzBCQVdnQixNQUFNOzJCQUFDLFdBQVc7NENBVHRCLE9BQU87c0JBQWYsS0FBSztnQkFDRyxHQUFHO3NCQUFYLEtBQUs7Z0JBQ0csRUFBRTtzQkFBVixLQUFLO2dCQUNHLGFBQWE7c0JBQXJCLEtBQUs7Z0JBQ0ksZUFBZTtzQkFBeEIsTUFBTTs7QUEwQ1gsTUFJYSxrQkFBbUIsU0FBUSxvQkFBb0I7SUFDSjtJQUFwRCxZQUFvRCxVQUFrQjtRQUNsRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFEOEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtJQUV0RSxDQUFDO3VHQUhRLGtCQUFrQixrQkFDUCxXQUFXOzJGQUR0QixrQkFBa0Isd0VBRmpCLHVCQUF1Qjs7U0FFeEIsa0JBQWtCOzJGQUFsQixrQkFBa0I7a0JBSjlCLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFFBQVEsRUFBRSx1QkFBdUI7aUJBQ3BDOzswQkFFZ0IsTUFBTTsyQkFBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIEluamVjdCwgSW5wdXQsIE9uRGVzdHJveSwgT3V0cHV0LCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBFTVBUWSwgZnJvbSwgbWVyZ2VNYXAsIFN1YmplY3QsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdHNQYXJ0aWNsZXMgfSBmcm9tICd0c3BhcnRpY2xlcy1lbmdpbmUnO1xuaW1wb3J0IHR5cGUgeyBDb250YWluZXIsIEVuZ2luZSB9IGZyb20gJ3RzcGFydGljbGVzLWVuZ2luZSc7XG5pbXBvcnQgeyBJUGFydGljbGVzUHJvcHMgfSBmcm9tICcuL25nLXBhcnRpY2xlcy5tb2R1bGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25nLXBhcnRpY2xlcycsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IFtpZF09XCJpZFwiPjwvZGl2PicsXG59KVxuZXhwb3J0IGNsYXNzIE5nUGFydGljbGVzQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBASW5wdXQoKSBvcHRpb25zPzogSVBhcnRpY2xlc1Byb3BzO1xuICAgIEBJbnB1dCgpIHVybD86IHN0cmluZztcbiAgICBASW5wdXQoKSBpZDogc3RyaW5nO1xuICAgIEBJbnB1dCgpIHBhcnRpY2xlc0luaXQ/OiAoZW5naW5lOiBFbmdpbmUpID0+IFByb21pc2U8dm9pZD47XG4gICAgQE91dHB1dCgpIHBhcnRpY2xlc0xvYWRlZDogRXZlbnRFbWl0dGVyPENvbnRhaW5lcj4gPSBuZXcgRXZlbnRFbWl0dGVyPENvbnRhaW5lcj4oKTtcblxuICAgIHByaXZhdGUgZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICAgIHByaXZhdGUgY29udGFpbmVyPzogQ29udGFpbmVyO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChQTEFURk9STV9JRCkgcHJvdGVjdGVkIHBsYXRmb3JtSWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmlkID0gJ3RzcGFydGljbGVzJztcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAoaXNQbGF0Zm9ybVNlcnZlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjYiA9IChjb250YWluZXI/OiBDb250YWluZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZXNMb2FkZWQuZW1pdChjb250YWluZXIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGZyb20odGhpcy5wYXJ0aWNsZXNJbml0ID8gdGhpcy5wYXJ0aWNsZXNJbml0KHRzUGFydGljbGVzKSA6IFByb21pc2UucmVzb2x2ZSgpKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWVyZ2VNYXAoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy51cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0c1BhcnRpY2xlcy5sb2FkSlNPTih0aGlzLmlkLCB0aGlzLnVybCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHNQYXJ0aWNsZXMubG9hZCh0aGlzLmlkLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignWW91IG11c3Qgc3BlY2lmeSBvcHRpb25zIG9yIHVybCB0byBsb2FkIHRzUGFydGljbGVzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRU1QVFk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB0YWtlVW50aWwodGhpcy5kZXN0cm95JClcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoY2IpO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb250YWluZXI/LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XG4gICAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ1BhcnRpY2xlcycsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IFtpZF09XCJpZFwiPjwvZGl2PicsXG59KVxuZXhwb3J0IGNsYXNzIFBhcnRpY2xlc0NvbXBvbmVudCBleHRlbmRzIE5nUGFydGljbGVzQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwcm90ZWN0ZWQgb3ZlcnJpZGUgcGxhdGZvcm1JZDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKHBsYXRmb3JtSWQpO1xuICAgIH1cbn1cbiJdfQ==